//https://www.hackerrank.com/challenges/detect-whether-a-linked-list-contains-a-cycle/problem
//below is solved using hashset - can be solved using hare and tortorise as well.

public class Solution {

    static class SinglyLinkedListNode {
        public int data;
        public SinglyLinkedListNode next;

        public SinglyLinkedListNode(int nodeData) {
            this.data = nodeData;
            this.next = null;
        }
    }

    static class SinglyLinkedList {
        public SinglyLinkedListNode head;
        public SinglyLinkedListNode tail;

        public SinglyLinkedList() {
            this.head = null;
            this.tail = null;
        }

        public void insertNode(int nodeData) {
            SinglyLinkedListNode node = new SinglyLinkedListNode(nodeData);

            if (this.head == null) {
                this.head = node;
            } else {
                this.tail.next = node;
            }

            this.tail = node;
        }
    }

    public static void printSinglyLinkedList(SinglyLinkedListNode node, String sep, BufferedWriter bufferedWriter) throws IOException {
        while (node != null) {
            bufferedWriter.write(String.valueOf(node.data));

            node = node.next;

            if (node != null) {
                bufferedWriter.write(sep);
            }
        }
    }

    
    static boolean hasCycle(SinglyLinkedListNode head) {
   if(head == null || head.next == null) {
        return false;
    }
    HashSet<SinglyLinkedListNode> visited = new HashSet<SinglyLinkedListNode>();
    SinglyLinkedListNode currentNode = head.next;
    while(currentNode != null) {
           
        if(visited.contains(currentNode)){
            return true;
        }else{
            visited.add(currentNode);
        }
        currentNode = currentNode.next;
    }
    
    return false;
     }

    private static final Scanner scanner = new Scanner(System.in);
