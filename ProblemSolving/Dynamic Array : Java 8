import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static List<Integer> dynamicArray(int n, List<List<Integer>> queries) {
    // list of integers
    List<List<Integer>> seqList = new ArrayList<>();
    
    //initialise with empty list
    for(int i=0; i<n ; i++){
    seqList.add(new ArrayList<Integer>());
    }
    //return list
    List<Integer> resultQuery = new ArrayList<>();
    
    //last answer
    int lastAns =0;
    
    for (List<Integer> q : queries){
    int index = (q.get(1) ^ lastAns)% n;
    
    int y = q.get(2);
    
    switch(q.get(0)){
      case 1 :
          seqList.get(index).add(y);     
          break;
      case 2 :
      int size = seqList.get(index).size();
      lastAns = seqList.get(index).get(y%size);
      resultQuery.add(lastAns);
          break;
    }
    }
    
      return resultQuery;

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int q = Integer.parseInt(firstMultipleInput[1]);

        List<List<Integer>> queries = new ArrayList<>();

        IntStream.range(0, q).forEach(i -> {
            try {
                queries.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        List<Integer> result = Result.dynamicArray(n, queries);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
